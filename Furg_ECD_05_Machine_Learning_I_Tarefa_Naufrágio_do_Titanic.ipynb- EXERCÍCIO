{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "nav_menu": {},
    "toc": {
      "navigate_menu": true,
      "number_sections": true,
      "sideBar": true,
      "threshold": 6,
      "toc_cell": false,
      "toc_section_display": "block",
      "toc_window_display": false
    },
    "colab": {
      "name": "Furg - ECD 05 - Machine Learning I - Tarefa: Naufrágio do Titanic",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pcpiscator/01T2021/blob/main/Furg_ECD_05_Machine_Learning_I_Tarefa_Naufr%C3%A1gio_do_Titanic.ipynb-%20EXERC%C3%8DCIO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZFC6buFsHqL2"
      },
      "source": [
        "# Curso de Especialização em Ciência de Dados - FURG\n",
        "## Machine Learning I - Tarefa: Naufrágio do Titanic\n",
        "### Prof. Marcelo Malheiros\n",
        "\n",
        "Código adaptado de Aurélien Geron (licença Apache-2.0)\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OT_Dek3yHqL6"
      },
      "source": [
        "Esta tarefa é para você **observar** e **analisar** este processo de Machine Learning.\n",
        "\n",
        "Adicionalmente, sugere-se que você também experimente com os dados e com os algoritmos, fazendo algumas das modificações indicadas em várias partes deste _notebook_.\n",
        "\n",
        "Note que não é preciso escrever mais código, apenas modificar o código já fornecido.\n",
        "\n",
        "Um questionário _online_ dentro da disciplina no AVA será disponibilizado para coletar sua análise. Este questionário será também uma das tarefas avaliativas desta disciplina."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "um1unyItHqL7"
      },
      "source": [
        "# Problema\n",
        "\n",
        "O problema aqui descrito é uma **tarefa de classificação**. Com base nos dados reais dos passageiros do navio RMS Titanic, precisamos ajustar um **modelo de previsão** para ser capaz de prever a chance de uma dada pessoa sobreviver ou não ao naufrágio (ocorrido em 15 de abril de 1912)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H5HTrqOTHqL8"
      },
      "source": [
        "# Inicialização\n",
        "\n",
        "Aqui importamos as bibliotecas fundamentais de Python para este _notebook_."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TIi8lqGuHqL9"
      },
      "source": [
        "%matplotlib inline\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import sklearn"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aVpO3LeaHqL-"
      },
      "source": [
        "# Conjunto de dados\n",
        "\n",
        "Este _dataset_ já está separado em dois conjuntos, um para **treino** (`titanic_treino.csv`) e outro para **teste** (`titanic_teste.csv`). \n",
        "\n",
        "Os conjuntos de treino e de teste já estão separados. Basta treinar um **modelo** com o conjunto de treino e analisar uma **medida de desempenho** sobre este.\n",
        "\n",
        "Quando esta medida indicar que o modelo tem boa qualidade, então deve-se usar o conjunto de teste para gerar uma nova previsão, comparar esta com o resultado já conhecido para cada passageiro.\n",
        "\n",
        "**Não se esqueça de fazer o upload dos dados para o Colaboratory, antes de rodar a célula a seguir.**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kffajNrbHqL_"
      },
      "source": [
        "# leitura dos conjuntos de dados\n",
        "\n",
        "treino = pd.read_csv('titanic_treino.csv')\n",
        "treino.set_index('id', inplace=True)\n",
        "\n",
        "teste = pd.read_csv(\"titanic_teste.csv\")\n",
        "teste.set_index('id', inplace=True)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YZk1ls5yHqMA"
      },
      "source": [
        "Cada conjunto de dados foi colocado em um `DataFrame` (da biblioteca Pandas).\n",
        "\n",
        "Vamos visualizar a seguir os primeiro cinco registros da base de treino:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iX7NsqL9HqMB",
        "outputId": "b8b822a0-def1-4fcc-cf46-12c8e3788998",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "treino.head(5)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sobrevivente</th>\n",
              "      <th>classe</th>\n",
              "      <th>nome</th>\n",
              "      <th>sexo</th>\n",
              "      <th>idade</th>\n",
              "      <th>familia1</th>\n",
              "      <th>familia2</th>\n",
              "      <th>tiquete</th>\n",
              "      <th>tarifa</th>\n",
              "      <th>cabine</th>\n",
              "      <th>embarque</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>M</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>F</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>F</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>F</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>M</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    sobrevivente  classe  ... cabine embarque\n",
              "id                        ...                \n",
              "1              0       3  ...    NaN        S\n",
              "2              1       1  ...    C85        C\n",
              "3              1       3  ...    NaN        S\n",
              "4              1       1  ...   C123        S\n",
              "5              0       3  ...    NaN        S\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fpu84NlNHqMD"
      },
      "source": [
        "Os dois conjuntos têm a mesma estrutura de atributos, onde cada linha representa um passageiro. As colunas são os atributos, definidos da seguinte forma:\n",
        "\n",
        "- **id**: um número sequencial, único para cada passageiro\n",
        "\n",
        "- **sobrevivente**: indica se o passageiro sobreviveu (1) ou não (0) ao naufrágio\n",
        "\n",
        "- **classe**: qual a classe da passagem comprada, da primeira (1) até a terceira (3) classe\n",
        "\n",
        "- **nome**: nome completo do passageiro (incluindo apelido, se for o caso)\n",
        "\n",
        "- **sexo**: sexo masculino (M) ou feminino (F)\n",
        "\n",
        "- **idade**: idade em anos\n",
        "\n",
        "- **familia1**: número de cônjuges, de irmãos e de irmãs presentes no navio\n",
        "\n",
        "- **familia2**: número de pais e de filhos do passageiro, também presentes no navio\n",
        "\n",
        "- **tiquete**: código do tíquete de embarque\n",
        "\n",
        "- **tarifa**: preço pago pela passagem, em libras esterlinas\n",
        "\n",
        "- **cabine**: código da cabine do passageiro\n",
        "\n",
        "- **embarque**: porto de embarque do passageiro, sendo Cherbourg (C), Queenstown (Q) ou  Southampton (S)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5JgmYl2iHqME"
      },
      "source": [
        "# Análise dos dados\n",
        "\n",
        "Aqui vamos computar algumas estatísticas sobre a base original de dados. Estas estatísticas são importantes tanto para perceber quais operações de preprocessamento serão necessárias como para escolher quais _features_ vamos usar no treinamento.\n",
        "\n",
        "Uma função muito útil para isso é a `.info()`, que mostra o tipo de dados e o número de valores presentes em cada coluna:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zMEuFUm8HqMF",
        "outputId": "1093470b-ddcd-4ad0-9b4a-e6ad639fa4b0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "treino.info()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 891 entries, 1 to 891\n",
            "Data columns (total 11 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   sobrevivente  891 non-null    int64  \n",
            " 1   classe        891 non-null    int64  \n",
            " 2   nome          891 non-null    object \n",
            " 3   sexo          891 non-null    object \n",
            " 4   idade         714 non-null    float64\n",
            " 5   familia1      891 non-null    int64  \n",
            " 6   familia2      891 non-null    int64  \n",
            " 7   tiquete       891 non-null    object \n",
            " 8   tarifa        891 non-null    float64\n",
            " 9   cabine        204 non-null    object \n",
            " 10  embarque      889 non-null    object \n",
            "dtypes: float64(2), int64(4), object(5)\n",
            "memory usage: 83.5+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yXr6MbXVHqMG"
      },
      "source": [
        "Para o conjunto de treino há um total de 891 registros.\n",
        "\n",
        "É possível perceber que há valores faltantes nas colunas `idade`, `cabine` e `embarque`. Na etapa de preprocessamento precisamos completar estes valores (por exemplo, preenchendo as idades faltantes com a mediana de todas as idades). Ou pode-se simplesmente descartar algumas colunas, como faremos depois com `cabine`.\n",
        "\n",
        "Podemos também olhar estatísticas sobre os valores das colunas numéricas usando `.describe()':"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7BO6-AcbHqMG",
        "outputId": "f423ac22-9e64-4323-ec07-cc46901c325b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "treino.describe()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sobrevivente</th>\n",
              "      <th>classe</th>\n",
              "      <th>idade</th>\n",
              "      <th>familia1</th>\n",
              "      <th>familia2</th>\n",
              "      <th>tarifa</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       sobrevivente      classe       idade    familia1    familia2      tarifa\n",
              "count    891.000000  891.000000  714.000000  891.000000  891.000000  891.000000\n",
              "mean       0.383838    2.308642   29.699118    0.523008    0.381594   32.204208\n",
              "std        0.486592    0.836071   14.526497    1.102743    0.806057   49.693429\n",
              "min        0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n",
              "25%        0.000000    2.000000   20.125000    0.000000    0.000000    7.910400\n",
              "50%        0.000000    3.000000   28.000000    0.000000    0.000000   14.454200\n",
              "75%        1.000000    3.000000   38.000000    1.000000    0.000000   31.000000\n",
              "max        1.000000    3.000000   80.000000    8.000000    6.000000  512.329200"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_CxBLrUIHqMH"
      },
      "source": [
        "Vale a pena também analisar as colunas que contém poucos valores, chamadas de categóricas, para identificar as classes presentes. Faremos isso chamando a função `.value_counts()` em cada uma."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qm4aPEeZHqMH",
        "outputId": "af88285b-649d-4dbd-925b-4177d5d6e92b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "treino['sobrevivente'].value_counts()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    549\n",
              "1    342\n",
              "Name: sobrevivente, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k2VMsds_HqMI",
        "outputId": "9f5a3fd0-8897-49c0-d0e6-de9d77f8069b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "treino['classe'].value_counts()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3    491\n",
              "1    216\n",
              "2    184\n",
              "Name: classe, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tdm4_txiHqMI",
        "outputId": "43d5a2f2-ac42-4c16-88fe-9399c2164ee4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "treino['sexo'].value_counts()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "M    577\n",
              "F    314\n",
              "Name: sexo, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qab8aN62HqMJ",
        "outputId": "801b9ce2-e9aa-4881-c894-5a292c56c429",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "treino['embarque'].value_counts()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "S    644\n",
              "C    168\n",
              "Q     77\n",
              "Name: embarque, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TQtHYgwZHqMJ"
      },
      "source": [
        "Como o atributo que desejamos prever, `sobrevivente` só tem dois valores, temos uma tarefa de **classificação binária**. Isso afeta diretamente quais algoritmos podemos usar para fazer o treino, posteriormente.\n",
        "\n",
        "Além disso, de 891 passageiros do conjunto de treino apenas 342 sobreviveram, o que equivale a 38%. O uso da **acurácia** como medida de desempenho parece adequado neste caso, uma vez que não há uma grande disparidade na quantidade de valores 0 e de valores 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-223Q-ufHqMK"
      },
      "source": [
        "# Correlação entre atributos\n",
        "\n",
        "Apenas para gerar uma intuição sobre os dados, vamos visualizar a correlação entre os atributos do conjunto de treino.\n",
        "\n",
        "Para isso usamos a função `.corr()` para calcular o coeficiente de correlação (também chamado de R de Pearson) entre cada par de atributos de um DataFrame.\n",
        "\n",
        "Então visualizamos a correlação com o nosso atributo alvo, `sobrevivente`:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UnWlLNdFHqMK",
        "outputId": "d981a506-9efc-4325-dc69-5b833249d84f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# cálculo da matriz de correlação\n",
        "corr = treino.corr()\n",
        "\n",
        "# quanto cada atributo se correlaciona com o valor de 'sobrevivente'\n",
        "corr['sobrevivente']"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sobrevivente    1.000000\n",
              "classe         -0.338481\n",
              "idade          -0.077221\n",
              "familia1       -0.035322\n",
              "familia2        0.081629\n",
              "tarifa          0.257307\n",
              "Name: sobrevivente, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dW5-IA2iHqML"
      },
      "source": [
        "Note que é possível visualizar a tabela inteira, que cruza cada os atributos com todos os demais, como visualizado abaixo. A escala de cores é de um azul mais intenso para valores negativos (no mínimo -1) e de vermelhos mais intensos para valores positivos (no máximo 1). Valores próximos ao zero são também mais próximos do branco.\n",
        "\n",
        "Ainda que haja correlação forte entre alguns atributos, para esta análise só interessam correlações envolvendo o atributo `sobrevivente`, ou seja, da linha superior ou da coluna mais à esquerda da tabela."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "COLP5eG5HqML",
        "outputId": "1d00d683-6d77-432c-97fc-8b983d205f4f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        }
      },
      "source": [
        "corr.style.background_gradient(axis=None, cmap='bwr').set_precision(2)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "#T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col0,#T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col1,#T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col2,#T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col3,#T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col4,#T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col5{\n",
              "            background-color:  #ff0000;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col1,#T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col0{\n",
              "            background-color:  #4444ff;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col2,#T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col0{\n",
              "            background-color:  #9c9cff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col3,#T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col0{\n",
              "            background-color:  #a8a8ff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col4,#T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col3,#T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col1,#T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col0{\n",
              "            background-color:  #d0d0ff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col5,#T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col0{\n",
              "            background-color:  #fff4f4;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col2,#T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col1{\n",
              "            background-color:  #3a3aff;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col4,#T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col1{\n",
              "            background-color:  #babaff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col5,#T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col1{\n",
              "            background-color:  #0000ff;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col3,#T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col2{\n",
              "            background-color:  #4e4eff;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col4,#T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col2{\n",
              "            background-color:  #7676ff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col5,#T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col2{\n",
              "            background-color:  #d4d4ff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col4,#T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col3{\n",
              "            background-color:  #ffc0c0;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col5,#T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col3{\n",
              "            background-color:  #eaeaff;\n",
              "            color:  #000000;\n",
              "        }#T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col5,#T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col4{\n",
              "            background-color:  #fcfcff;\n",
              "            color:  #000000;\n",
              "        }</style><table id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >sobrevivente</th>        <th class=\"col_heading level0 col1\" >classe</th>        <th class=\"col_heading level0 col2\" >idade</th>        <th class=\"col_heading level0 col3\" >familia1</th>        <th class=\"col_heading level0 col4\" >familia2</th>        <th class=\"col_heading level0 col5\" >tarifa</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >sobrevivente</th>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col0\" class=\"data row0 col0\" >1.00</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col1\" class=\"data row0 col1\" >-0.34</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col2\" class=\"data row0 col2\" >-0.08</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col3\" class=\"data row0 col3\" >-0.04</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col4\" class=\"data row0 col4\" >0.08</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row0_col5\" class=\"data row0 col5\" >0.26</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >classe</th>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col0\" class=\"data row1 col0\" >-0.34</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col1\" class=\"data row1 col1\" >1.00</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col2\" class=\"data row1 col2\" >-0.37</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col3\" class=\"data row1 col3\" >0.08</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col4\" class=\"data row1 col4\" >0.02</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row1_col5\" class=\"data row1 col5\" >-0.55</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >idade</th>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col0\" class=\"data row2 col0\" >-0.08</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col1\" class=\"data row2 col1\" >-0.37</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col2\" class=\"data row2 col2\" >1.00</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col3\" class=\"data row2 col3\" >-0.31</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col4\" class=\"data row2 col4\" >-0.19</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row2_col5\" class=\"data row2 col5\" >0.10</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >familia1</th>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col0\" class=\"data row3 col0\" >-0.04</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col1\" class=\"data row3 col1\" >0.08</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col2\" class=\"data row3 col2\" >-0.31</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col3\" class=\"data row3 col3\" >1.00</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col4\" class=\"data row3 col4\" >0.41</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row3_col5\" class=\"data row3 col5\" >0.16</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >familia2</th>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col0\" class=\"data row4 col0\" >0.08</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col1\" class=\"data row4 col1\" >0.02</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col2\" class=\"data row4 col2\" >-0.19</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col3\" class=\"data row4 col3\" >0.41</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col4\" class=\"data row4 col4\" >1.00</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row4_col5\" class=\"data row4 col5\" >0.22</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >tarifa</th>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col0\" class=\"data row5 col0\" >0.26</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col1\" class=\"data row5 col1\" >-0.55</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col2\" class=\"data row5 col2\" >0.10</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col3\" class=\"data row5 col3\" >0.16</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col4\" class=\"data row5 col4\" >0.22</td>\n",
              "                        <td id=\"T_c27f4106_9607_11eb_951a_0242ac1c0002row5_col5\" class=\"data row5 col5\" >1.00</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f61eb2c5990>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m7yVZPJPHqML"
      },
      "source": [
        "# Separação dos dados\n",
        "\n",
        "Agora vamos separar cada conjunto de dados em duas partes: `features`, que são os atributos sobre os quais treinaremos o modelo, e `rotulos`, que contém o atributo a ser previsto (no caso, apenas `sobrevivente`).\n",
        "        \n",
        "Para simplificar, vamos ignorar os atributos `nome`, `tiquete` e `cabine`, que são meramente textuais."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bxPKrQ2UHqMM"
      },
      "source": [
        "# separacão das features\n",
        "treino_features = treino[['classe', 'sexo', 'idade', 'familia1', 'familia2', 'tarifa', 'embarque']]\n",
        "teste_features  =  teste[['classe', 'sexo', 'idade', 'familia1', 'familia2', 'tarifa', 'embarque']]\n",
        "\n",
        "# separação dos rótulos\n",
        "treino_rotulos = treino[['sobrevivente']]\n",
        "teste_rotulos  =  teste[['sobrevivente']]"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8GIdQGTIHqMM"
      },
      "source": [
        "Vamos ver o número de linhas e de colunas de cada subconjunto criado:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "edgzV-hxHqMN",
        "outputId": "cd456055-d89c-40ea-fe62-7a11a814a5a9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print('treino_features:', treino_features.shape)\n",
        "print('treino_rotulos: ', treino_rotulos.shape)\n",
        "print('teste_features: ', teste_features.shape)\n",
        "print('teste_rotulos:  ', teste_rotulos.shape)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "treino_features: (891, 7)\n",
            "treino_rotulos:  (891, 1)\n",
            "teste_features:  (418, 7)\n",
            "teste_rotulos:   (418, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-3AKdGlWHqMN"
      },
      "source": [
        "# Preprocessamento\n",
        "\n",
        "Aqui faremos a etapa de preprocessamento, necessária para transformar os dados brutos em valores mais adequados para os algoritmos de Machine Learning.\n",
        "\n",
        "Lembrando, todo o processo de transformação dos dados é chamado de _pipeline_."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fCDf9ujbHqMN"
      },
      "source": [
        "from sklearn.pipeline import Pipeline"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xozttE8tHqMO"
      },
      "source": [
        "# aqui definimos uma etapa auxiliar do pipeline para atributos categóricos:\n",
        "# esta substitui valores faltando pelo mais frequente de cada coluna\n",
        "# (não se preocupe com os detalhes do código)\n",
        "\n",
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "class MostFrequentImputer(BaseEstimator, TransformerMixin):\n",
        "    def fit(self, X, y=None):\n",
        "        self.most_frequent_ = pd.Series([X[c].value_counts().index[0] for c in X], index=X.columns)\n",
        "        return self\n",
        "    def transform(self, X, y=None):\n",
        "        return X.fillna(self.most_frequent_)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JFxkRxWpHqMO"
      },
      "source": [
        "Atributos numéricos (contínuos) e atributos categóricos (discretos) precisam ser processados separadamente.\n",
        "\n",
        "O trecho a seguir define um _pipeline_ genérico, apenas para os atributos numéricos. A etapa usando `SimpleImputer(strategy='median')` preenche valores faltando com a mediana dos valores daquele atributo.\n",
        "\n",
        "**Ajuste:** A etapa de escalonamento usando `StandardScaler()` está desativada. Depois de medir o desempenho do modelo você pode ativar esta etapa, rodando novamente o preprocessamento e o treino, para verificar se melhora a qualidade do modelo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lqrZMAMaHqMO"
      },
      "source": [
        "# pipeline para atributos numéricos\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "num_pipeline = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='median')),\n",
        "    #('std_scaler', StandardScaler()),\n",
        "])"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C__czxSGHqMP"
      },
      "source": [
        "O trecho a seguir define um pipeline genérico, apenas para os atributos categóricos.\n",
        "\n",
        "A etapa usando `MostFrequentImputer()` preenche valores faltando com o mais frequente dos valores daquele atributo. Já a etapa seguinte, usando `OneHotEncoder(sparse=False)` expande cada atributo que não é numérico (`classe`, `sexo` ou `embarque`) para um conjunto de atributos binários. Esta precisa ser a última etapa desse _pipeline_."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b19ItpYRHqMP"
      },
      "source": [
        "# pipeline para atributos categóricos\n",
        "\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "cat_pipeline = Pipeline([\n",
        "    ('imputer', MostFrequentImputer()),\n",
        "    ('encoder', OneHotEncoder(sparse=False)),\n",
        "])"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kEK1AeqQHqMP"
      },
      "source": [
        "A seguir usamos o recurso `ColumnTransformer`, muito útil, para aplicar determinados _pipelines_ para apenas alguns atributos dos dados. Assim temos um _pipeline_ inteligente que processa os dados de uma só vez, mas executa operações diferentes conforme a natureza de cada atributo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c6vWwNc6HqMQ"
      },
      "source": [
        "# pipeline combinando atributos numéricos com atributos categóricos\n",
        "\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "full_pipeline = ColumnTransformer([\n",
        "    ('num', num_pipeline, ['idade', 'familia1', 'familia2', 'tarifa']),\n",
        "    ('cat', cat_pipeline, ['classe', 'sexo', 'embarque']),\n",
        "])"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xrP6Ek37HqMQ"
      },
      "source": [
        "Enfim, processamos os features de treino, gerando um novo conjunto de dados pronto para o treinamento."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m_TB8ZmeHqMQ",
        "outputId": "4c40a881-b43c-4d9c-c4c3-2c7fa85e93ce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "X_treino = full_pipeline.fit_transform(treino_features)\n",
        "print('X_treino:', X_treino.shape)\n",
        "print(X_treino)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_treino: (891, 12)\n",
            "[[22.  1.  0. ...  0.  0.  1.]\n",
            " [38.  1.  0. ...  1.  0.  0.]\n",
            " [26.  0.  0. ...  0.  0.  1.]\n",
            " ...\n",
            " [28.  1.  2. ...  0.  0.  1.]\n",
            " [26.  0.  0. ...  1.  0.  0.]\n",
            " [32.  0.  0. ...  0.  1.  0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nhJcQK8HHqMR"
      },
      "source": [
        "Aqui vamos extrair somente os dados brutos dos rótulos, e colocar em `y_treino`, que é o formato esperado pelos algoritmos de Machine Learning."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qXYFoBNnHqMR",
        "outputId": "2132a2cc-6fae-4dcc-8f93-009a7546a1d1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "y_treino = treino_rotulos.values.ravel()\n",
        "print('y_treino:', y_treino.shape)\n",
        "#print(y_treino)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "y_treino: (891,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycJvMubDHqMS"
      },
      "source": [
        "# Seleção do modelo\n",
        "\n",
        "Aqui selecionamos um modelo para o aprendizado, baseado em um dos possíveis algoritmos de classificação binária. \n",
        "\n",
        "**Ajuste:** Depois de medir o desempenho do modelo você pode habilitar outros algoritmos. Note que apenas um par de comandos deve estar ativo (a linha `from` e a correspondente criação do `classificador`).\n",
        "\n",
        "- Para o algoritmo `SVC` você pode mudar o parâmetro para `gamma='auto'`.\n",
        "\n",
        "- Para o algoritmo `SGDClassifier` você pode mudar o parâmetro para `loss='log'`.\n",
        "\n",
        "- Para o algoritmo `LogisticRegression` você **precisa ter os dados escalonados** como parte do _pipeline_ numérico. Ou seja, é preciso que a linha do `StandardScaler()` esteja habilitada e que os dados sejam novamente preprocessados.\n",
        "\n",
        "- Para o algoritmo `RandomForestClassifier` você pode aumentar o parâmetro `n_estimators`, por exemplo para 10 ou 100."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TUUkca4BHqMS"
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "classificador = SVC(random_state=42, gamma='scale')\n",
        "\n",
        "#from sklearn.linear_model import SGDClassifier\n",
        "#classificador = SGDClassifier(random_state=42, loss='hinge')\n",
        "\n",
        "#from sklearn.linear_model import LogisticRegression\n",
        "#classificador = LogisticRegression(random_state=42)\n",
        "\n",
        "#from sklearn.ensemble import RandomForestClassifier\n",
        "#classificador = RandomForestClassifier(random_state=42, n_estimators=1)"
      ],
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hrYsx-SWAYn8"
      },
      "source": [
        "Habilitando algorítmos diversos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R-Cm-2AJAUIV"
      },
      "source": [
        "#from sklearn.svm import SVC\n",
        "#classificador = SVC(random_state=42, gamma='auto')\n",
        "\n",
        "#from sklearn.linear_model import SGDClassifier\n",
        "#classificador = SGDClassifier(random_state=42, loss='log')\n",
        "\n",
        "#from sklearn.linear_model import LogisticRegression\n",
        "#classificador = LogisticRegression(random_state=42)\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "classificador = RandomForestClassifier(random_state=42, n_estimators=100)"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "svsfXqIBHqMS"
      },
      "source": [
        "# Treino e medida de desempenho\n",
        "\n",
        "Vamos treinar e avaliar um classificador fazendo a **validação cruzada** do conjunto de treino. O parâmetro `cv` indica o número de dobras (ou _folds_), que é o número de vezes em que o conjunto é repartido, treinado e mensurado.\n",
        "\n",
        "Como medida de desempenho vamos usar a **acurácia** (_accuracy_), que indica o percentual de acertos na previsão.\n",
        "\n",
        "Como a validação cruzada devolve várias medidas, guardadas na lista `scores`, calculamos e exibimos uma média aritmética simples dessas medidas."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FFpMf_7zHqMS",
        "outputId": "c51943ec-0afd-4d42-ffa6-5a3a7a8b8512",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# validação cruzada\n",
        "\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(classificador, X_treino, y_treino, cv=12, scoring='accuracy')\n",
        "print('{:.2%}'.format(scores.mean()))"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "80.82%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oLFEsXWZHqMT"
      },
      "source": [
        "**Opcional:** Para melhorar o modelo existem diversas possibilidades de **ajuste** do modelo:\n",
        "\n",
        "- A ação mais direta é simplesmente testar outros algoritmos, como mostrado na seção \"Seleção do Modelo\".\n",
        "\n",
        "- Você também pode ativar o escalonamento de _features_ na seção \"Preprocessamento\" e ver se houve ganho.\n",
        "\n",
        "- Outra possibilidade é reduzir o número de _features_, simplesmente retirando atributos numéricos e categóricos do _pipeline_ `full_pipeline` na seção \"Preprocessamento\".\n",
        "\n",
        "**Avançado**: Ainda é possível criar novas _features_ (o que precisa ser feito na seção \"Separação dos dados\"). Seguem três sugestões (que precisariam ser repetidas para o conjunto `teste`):\n",
        "\n",
        "    # novo atributo (categórico) agrupando idades por faixas\n",
        "    treino['faixa_etaria'] = treino['idade'] // 15 * 15\n",
        "    treino[['faixa_etaria', 'sobrevivente']].groupby(['faixa_etaria']).mean()    \n",
        "\n",
        "    # novo atributo (numérico ou categórico), agrupando dados sobre familiares\n",
        "    treino['total_parentes'] = treino['familia1'] + treino['familia2']\n",
        "    treino[['total_parentes', 'sobrevivente']].groupby(['total_parentes']).mean()\n",
        "\n",
        "    # novo atributo (binário e categórico) identificando passageiros viajando sozinhos\n",
        "    # (apenas 30% destes sobreviveram)\n",
        "    treino['sozinho'] = (treino['familia1'] + treino['familia2']) == 0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7oCAmyKjHqMT"
      },
      "source": [
        "# Teste final do modelo\n",
        "\n",
        "Se você estiver satisfeito com a qualidade do modelo obtido (com base apenas nos rótulos de treino), então podemos fazer o teste final do modelo.\n",
        "\n",
        "Vamos gerar a versão treinada do modelo, preprocessar os dados de teste e então gerar previsões.\n",
        "\n",
        "Note que o treinamento do modelo é feito de fato aqui, com a chamada de `.fit()`. A validação cruzada feita anteriormente gera modelos temporários para as medidas e os descarta, mas não deixa o modelo treinado."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X9yIkQW5HqMU"
      },
      "source": [
        "# treinamento\n",
        "classificador.fit(X_treino, y_treino)\n",
        "\n",
        "# preprocessamento dos dados de teste\n",
        "X_teste = full_pipeline.transform(teste_features)\n",
        "\n",
        "# geração das previsões\n",
        "y_teste_pred = classificador.predict(X_teste)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3SM7sIViHqMU"
      },
      "source": [
        "Agora vamos avaliar a acurácia novamente, porém comparando o valores previstos com base nos dados de teste contra os rótulos reais para os mesmos dados de teste."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m-omXxZ8HqMU",
        "outputId": "28e4a280-5638-441b-c35f-15ee8c856438",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# rótulos reais\n",
        "y_teste = teste_rotulos.values.ravel()\n",
        "\n",
        "# medida de acurácia\n",
        "from sklearn.metrics import accuracy_score\n",
        "score = accuracy_score(y_teste, y_teste_pred)\n",
        "print('{:.2%}'.format(score))"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "66.51%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vHSn1HNcHqMW"
      },
      "source": [
        "# Gerando novas previsões\n",
        "\n",
        "Uma vez treinado e testado, o modelo pode ser usado para gerar previsões sobre dados nunca antes vistos.\n",
        "\n",
        "No exemplo abaixo um `DataFrame` com o mesmo formato dos conjuntos de `features` é criado, com apenas uma linha. Para essa pessoa fictícia, podemos usar o modelo para gerar uma previsão de sua possível sobrevivência ou não ao naufrágio do Titanic:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3UWss_jNHqMW"
      },
      "source": [
        "anon = pd.DataFrame(columns=['classe', 'sexo', 'idade', 'familia1', 'familia2', 'tarifa', 'embarque'],\n",
        "                    data   =[[      2,    'M',     40,           1,          0,     50.0,        'Q']])"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lq48A8rCHqMW"
      },
      "source": [
        "X_anon = full_pipeline.transform(anon)\n",
        "y_anon = classificador.predict(X_anon)\n",
        "y_anon[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "toPJSj0Kv9B7"
      },
      "source": [
        "JDawson = pd.DataFrame(columns=['classe', 'sexo', 'idade', 'familia1', 'familia2', 'tarifa', 'embarque'],\n",
        "                    data   =[[      3,    'M',     20,           0,          0,     8.0,        'S']])"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LPBvUSmQwLWM",
        "outputId": "4785755f-648e-4445-9437-f73f9c22d234"
      },
      "source": [
        "X_JDawson = full_pipeline.transform(JDawson)\n",
        "y_JDawson = classificador.predict(X_JDawson)\n",
        "y_JDawson[0]"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "86QuglOZxVkG"
      },
      "source": [
        "Rose = pd.DataFrame(columns=['classe', 'sexo', 'idade', 'familia1', 'familia2', 'tarifa', 'embarque'],\n",
        "                    data   =[[      1,    'F',     17,           1,          0,    100.0,        'S']])"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IFLZRsJ7xYa5",
        "outputId": "8a23242c-9bc0-4056-ff96-0492d6dc0daf"
      },
      "source": [
        "X_Rose = full_pipeline.transform(Rose)\n",
        "y_Rose = classificador.predict(X_Rose)\n",
        "y_Rose[0]"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    }
  ]
}